#.3108. Minimum Cost Walk in Weighted Graph.


import java.util.*;

class Solution {
    public int[] minimumCost(int n, int[][] edges, int[][] query) {
        List<int[]>[] graph = new ArrayList[n];
        for (int i = 0; i < n; i++) graph[i] = new ArrayList<>();

        for (int[] edge : edges) {
            int u = edge[0], v = edge[1], w = edge[2];
            graph[u].add(new int[]{v, w});
            graph[v].add(new int[]{u, w});
        }

        int[] component = new int[n];
        Arrays.fill(component, -1);
        int[] minAndCost = new int[n];
        Arrays.fill(minAndCost, -1);
        
        int compId = 0;
        for (int i = 0; i < n; i++) {
            if (component[i] == -1) {
                minAndCost[compId] = bfs(graph, i, component, compId);
                compId++;
            }
        }

        int[] res = new int[query.length];
        for (int i = 0; i < query.length; i++) {
            int u = query[i][0], v = query[i][1];
            if (component[u] != component[v]) res[i] = -1;
            else res[i] = minAndCost[component[u]];
        }
        
        return res;
    }

    private int bfs(List<int[]>[] graph, int start, int[] component, int compId) {
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(start);
        component[start] = compId;
        
        int minAnd = -1;
        while (!queue.isEmpty()) {
            int node = queue.poll();
            for (int[] neighbor : graph[node]) {
                int next = neighbor[0], weight = neighbor[1];
                if (component[next] == -1) {
                    component[next] = compId;
                    queue.offer(next);
                }
                if (minAnd == -1) minAnd = weight;
                else minAnd &= weight;
            }
        }
        return minAnd;
    }
}
