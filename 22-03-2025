#.2685. Count the Number of Complete Components.

import java.util.*;

class Solution {
    public int countCompleteComponents(int n, int[][] edges) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) graph.add(new ArrayList<>());
        
        // Build adjacency list
        for (int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        
        boolean[] visited = new boolean[n];
        int completeComponents = 0;
        
        // BFS to find connected components
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                List<Integer> component = new ArrayList<>();
                Queue<Integer> queue = new LinkedList<>();
                queue.offer(i);
                visited[i] = true;

                while (!queue.isEmpty()) {
                    int node = queue.poll();
                    component.add(node);
                    for (int neighbor : graph.get(node)) {
                        if (!visited[neighbor]) {
                            visited[neighbor] = true;
                            queue.offer(neighbor);
                        }
                    }
                }
                
                // Check if the component is complete
                int size = component.size();
                int expectedEdges = size * (size - 1) / 2;
                int actualEdges = 0;
                for (int node : component) {
                    actualEdges += graph.get(node).size();
                }
                actualEdges /= 2; // Since edges are bidirectional
                
                if (actualEdges == expectedEdges) completeComponents++;
            }
        }
        
        return completeComponents;
    }
}


